begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|llap
operator|.
name|api
operator|.
name|impl
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedList
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|llap
operator|.
name|DebugUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|llap
operator|.
name|api
operator|.
name|Llap
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|llap
operator|.
name|api
operator|.
name|Reader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|llap
operator|.
name|api
operator|.
name|Vector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|llap
operator|.
name|cache
operator|.
name|BufferPool
operator|.
name|WeakBuffer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|llap
operator|.
name|processor
operator|.
name|ChunkConsumer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|llap
operator|.
name|processor
operator|.
name|ChunkProducerFeedback
import|;
end_import

begin_comment
comment|/**  * Reader implementation is not thread safe.  */
end_comment

begin_class
specifier|public
class|class
name|ReaderImpl
implements|implements
name|Reader
implements|,
name|ChunkConsumer
block|{
specifier|private
name|ChunkProducerFeedback
name|feedback
decl_stmt|;
comment|/**    * Data that has been passed to use by the pipeline but has not been read.    * We may add some throttling feedback later if needed when this grows too large.    */
specifier|private
specifier|final
name|LinkedList
argument_list|<
name|Vector
argument_list|>
name|pendingData
init|=
operator|new
name|LinkedList
argument_list|<
name|Vector
argument_list|>
argument_list|()
decl_stmt|;
specifier|private
name|Throwable
name|pendingError
init|=
literal|null
decl_stmt|;
comment|/** Vector that is currently being processed by our user. */
specifier|private
name|Vector
name|current
init|=
literal|null
decl_stmt|;
specifier|private
name|boolean
name|isDone
init|=
literal|false
decl_stmt|,
name|isClosed
init|=
literal|false
decl_stmt|;
annotation|@
name|Override
specifier|public
name|void
name|init
parameter_list|(
name|ChunkProducerFeedback
name|feedback
parameter_list|)
block|{
name|this
operator|.
name|feedback
operator|=
name|feedback
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|Vector
name|next
parameter_list|()
throws|throws
name|InterruptedException
throws|,
name|IOException
block|{
if|if
condition|(
name|DebugUtils
operator|.
name|isTraceEnabled
argument_list|()
condition|)
block|{
name|Llap
operator|.
name|LOG
operator|.
name|info
argument_list|(
literal|"next called; current="
operator|+
name|current
operator|+
literal|", closed "
operator|+
name|isClosed
operator|+
literal|", done "
operator|+
name|isDone
operator|+
literal|", err "
operator|+
name|pendingError
operator|+
literal|", pending "
operator|+
name|pendingData
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|current
operator|!=
literal|null
condition|)
block|{
comment|// Indicate that we are done with this vector.
if|if
condition|(
name|DebugUtils
operator|.
name|isTraceMttEnabled
argument_list|()
condition|)
block|{
name|Llap
operator|.
name|LOG
operator|.
name|info
argument_list|(
literal|"Processing is done with vector "
operator|+
name|getVectorDebugDesc
argument_list|(
name|current
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|feedback
operator|.
name|returnCompleteVector
argument_list|(
name|current
argument_list|)
expr_stmt|;
name|current
operator|=
literal|null
expr_stmt|;
block|}
synchronized|synchronized
init|(
name|pendingData
init|)
block|{
if|if
condition|(
name|isClosed
condition|)
block|{
throw|throw
operator|new
name|AssertionError
argument_list|(
literal|"next called after close"
argument_list|)
throw|;
block|}
comment|// We are waiting for next block. Either we will get it, or be told we are done.
name|boolean
name|willBlock
init|=
literal|false
decl_stmt|;
if|if
condition|(
name|DebugUtils
operator|.
name|isTraceMttEnabled
argument_list|()
condition|)
block|{
name|willBlock
operator|=
operator|!
name|isDone
operator|&&
name|pendingData
operator|.
name|isEmpty
argument_list|()
operator|&&
name|pendingError
operator|==
literal|null
expr_stmt|;
if|if
condition|(
name|willBlock
condition|)
block|{
name|Llap
operator|.
name|LOG
operator|.
name|info
argument_list|(
literal|"next will block"
argument_list|)
expr_stmt|;
block|}
block|}
while|while
condition|(
operator|!
name|isDone
operator|&&
name|pendingData
operator|.
name|isEmpty
argument_list|()
operator|&&
name|pendingError
operator|==
literal|null
condition|)
block|{
name|pendingData
operator|.
name|wait
argument_list|(
literal|100
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|willBlock
condition|)
block|{
name|Llap
operator|.
name|LOG
operator|.
name|info
argument_list|(
literal|"next is unblocked"
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|pendingError
operator|!=
literal|null
condition|)
block|{
name|returnAllVectors
argument_list|()
expr_stmt|;
name|rethrowErrorIfAny
argument_list|()
expr_stmt|;
block|}
name|current
operator|=
name|pendingData
operator|.
name|poll
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|DebugUtils
operator|.
name|isTraceMttEnabled
argument_list|()
operator|&&
name|current
operator|!=
literal|null
condition|)
block|{
name|Llap
operator|.
name|LOG
operator|.
name|info
argument_list|(
literal|"Processing will receive vector "
operator|+
name|getVectorDebugDesc
argument_list|(
name|current
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|current
return|;
block|}
specifier|private
specifier|static
name|String
name|getVectorDebugDesc
parameter_list|(
name|Vector
name|vector
parameter_list|)
block|{
name|String
name|vectorDesc
init|=
literal|"0x"
operator|+
name|Integer
operator|.
name|toHexString
argument_list|(
name|System
operator|.
name|identityHashCode
argument_list|(
name|vector
argument_list|)
argument_list|)
operator|+
literal|" with buffers ["
decl_stmt|;
name|VectorImpl
name|currentImpl
init|=
operator|(
name|VectorImpl
operator|)
name|vector
decl_stmt|;
name|boolean
name|isFirst
init|=
literal|true
decl_stmt|;
for|for
control|(
name|WeakBuffer
name|wb
range|:
name|currentImpl
operator|.
name|getCacheBuffers
argument_list|()
control|)
block|{
if|if
condition|(
name|isFirst
condition|)
block|{
name|vectorDesc
operator|+=
literal|", "
expr_stmt|;
name|isFirst
operator|=
literal|false
expr_stmt|;
block|}
name|vectorDesc
operator|+=
name|wb
operator|.
name|toString
argument_list|()
expr_stmt|;
block|}
return|return
name|vectorDesc
operator|+
literal|"]"
return|;
block|}
specifier|private
name|void
name|rethrowErrorIfAny
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
name|pendingError
operator|==
literal|null
condition|)
return|return;
if|if
condition|(
name|pendingError
operator|instanceof
name|IOException
condition|)
block|{
throw|throw
operator|(
name|IOException
operator|)
name|pendingError
throw|;
block|}
throw|throw
operator|new
name|IOException
argument_list|(
name|pendingError
argument_list|)
throw|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|close
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
name|DebugUtils
operator|.
name|isTraceEnabled
argument_list|()
condition|)
block|{
name|Llap
operator|.
name|LOG
operator|.
name|info
argument_list|(
literal|"close called; current="
operator|+
name|current
operator|+
literal|", closed "
operator|+
name|isClosed
operator|+
literal|", done "
operator|+
name|isDone
operator|+
literal|", err "
operator|+
name|pendingError
operator|+
literal|", pending "
operator|+
name|pendingData
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|feedback
operator|.
name|stop
argument_list|()
expr_stmt|;
name|returnAllVectors
argument_list|()
expr_stmt|;
name|rethrowErrorIfAny
argument_list|()
expr_stmt|;
block|}
specifier|private
name|void
name|returnAllVectors
parameter_list|()
block|{
comment|// 1) We assume next is never called in parallel with close, so we can remove current.
comment|// 2) After stop, producer shouldn't call consumeChunk (but it may). We set isClosed and
comment|//    remove pending data under lock - either consume will discard the block, or we will.
name|LinkedList
argument_list|<
name|Vector
argument_list|>
name|unused
init|=
operator|new
name|LinkedList
argument_list|<
name|Vector
argument_list|>
argument_list|()
decl_stmt|;
if|if
condition|(
name|current
operator|!=
literal|null
condition|)
block|{
name|unused
operator|.
name|add
argument_list|(
name|current
argument_list|)
expr_stmt|;
name|current
operator|=
literal|null
expr_stmt|;
block|}
synchronized|synchronized
init|(
name|pendingData
init|)
block|{
name|isClosed
operator|=
literal|true
expr_stmt|;
name|unused
operator|.
name|addAll
argument_list|(
name|pendingData
argument_list|)
expr_stmt|;
name|pendingData
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
for|for
control|(
name|Vector
name|v
range|:
name|unused
control|)
block|{
name|feedback
operator|.
name|returnCompleteVector
argument_list|(
name|v
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|setDone
parameter_list|()
block|{
if|if
condition|(
name|DebugUtils
operator|.
name|isTraceEnabled
argument_list|()
condition|)
block|{
name|Llap
operator|.
name|LOG
operator|.
name|info
argument_list|(
literal|"setDone called; current="
operator|+
name|current
operator|+
literal|", closed "
operator|+
name|isClosed
operator|+
literal|", done "
operator|+
name|isDone
operator|+
literal|", err "
operator|+
name|pendingError
operator|+
literal|", pending "
operator|+
name|pendingData
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
synchronized|synchronized
init|(
name|pendingData
init|)
block|{
name|isDone
operator|=
literal|true
expr_stmt|;
name|pendingData
operator|.
name|notifyAll
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|setError
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
if|if
condition|(
name|DebugUtils
operator|.
name|isTraceEnabled
argument_list|()
condition|)
block|{
name|Llap
operator|.
name|LOG
operator|.
name|info
argument_list|(
literal|"setError called; current="
operator|+
name|current
operator|+
literal|", closed "
operator|+
name|isClosed
operator|+
literal|", done "
operator|+
name|isDone
operator|+
literal|", err "
operator|+
name|pendingError
operator|+
literal|", pending "
operator|+
name|pendingData
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
assert|assert
name|t
operator|!=
literal|null
assert|;
synchronized|synchronized
init|(
name|pendingData
init|)
block|{
name|pendingError
operator|=
name|t
expr_stmt|;
name|pendingData
operator|.
name|notifyAll
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|consumeVector
parameter_list|(
name|Vector
name|vector
parameter_list|)
block|{
if|if
condition|(
name|DebugUtils
operator|.
name|isTraceEnabled
argument_list|()
condition|)
block|{
name|Llap
operator|.
name|LOG
operator|.
name|info
argument_list|(
literal|"consumeVector called; current="
operator|+
name|current
operator|+
literal|", closed "
operator|+
name|isClosed
operator|+
literal|", done "
operator|+
name|isDone
operator|+
literal|", err "
operator|+
name|pendingError
operator|+
literal|", pending "
operator|+
name|pendingData
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
synchronized|synchronized
init|(
name|pendingData
init|)
block|{
if|if
condition|(
name|isClosed
condition|)
block|{
name|feedback
operator|.
name|returnCompleteVector
argument_list|(
name|vector
argument_list|)
expr_stmt|;
return|return;
block|}
name|pendingData
operator|.
name|add
argument_list|(
name|vector
argument_list|)
expr_stmt|;
name|pendingData
operator|.
name|notifyAll
argument_list|()
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

