begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|llap
operator|.
name|loader
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|llap
operator|.
name|cache
operator|.
name|BufferPool
operator|.
name|WeakBuffer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|llap
operator|.
name|loader
operator|.
name|ChunkPool
operator|.
name|Chunk
import|;
end_import

begin_comment
comment|/**  * Helper struct that is used by loaders (e.g. OrcLoader) and chunk writer to write chunks.  */
end_comment

begin_class
specifier|public
class|class
name|BufferInProgress
block|{
comment|/** Buffer that is being written to. */
specifier|public
specifier|final
name|WeakBuffer
name|buffer
decl_stmt|;
comment|/** Offset in buffer where writing can proceed */
specifier|public
name|int
name|offset
decl_stmt|;
comment|// TODO: use WB's position; these have separate lifecycle now, needed?
specifier|private
specifier|final
name|int
name|bufferLimit
decl_stmt|;
comment|/** The chunk that is currently being written. */
specifier|private
name|Chunk
name|chunkInProgress
init|=
literal|null
decl_stmt|;
comment|/** The row count of the chunk currently being written. */
specifier|private
name|int
name|chunkInProgressRows
init|=
literal|0
decl_stmt|;
specifier|public
name|BufferInProgress
parameter_list|(
name|WeakBuffer
name|buffer
parameter_list|)
block|{
name|this
operator|.
name|buffer
operator|=
name|buffer
expr_stmt|;
name|this
operator|.
name|bufferLimit
operator|=
name|buffer
operator|.
name|getContents
argument_list|()
operator|.
name|limit
argument_list|()
expr_stmt|;
name|this
operator|.
name|offset
operator|=
literal|0
expr_stmt|;
block|}
specifier|public
name|Chunk
name|ensureChunk
parameter_list|()
block|{
if|if
condition|(
name|chunkInProgress
operator|==
literal|null
condition|)
block|{
name|chunkInProgress
operator|=
operator|new
name|Chunk
argument_list|(
name|buffer
argument_list|,
name|offset
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|chunkInProgressRows
operator|=
literal|0
expr_stmt|;
block|}
return|return
name|chunkInProgress
return|;
block|}
specifier|public
name|Chunk
name|extractChunk
parameter_list|()
block|{
name|Chunk
name|result
init|=
name|chunkInProgress
decl_stmt|;
name|chunkInProgress
operator|=
literal|null
expr_stmt|;
name|chunkInProgressRows
operator|=
literal|0
expr_stmt|;
return|return
name|result
return|;
block|}
specifier|public
name|void
name|update
parameter_list|(
name|int
name|newOffset
parameter_list|,
name|int
name|rowsWritten
parameter_list|)
block|{
if|if
condition|(
name|newOffset
operator|>
name|bufferLimit
condition|)
block|{
throw|throw
operator|new
name|AssertionError
argument_list|(
literal|"Offset is beyond buffer limit: "
operator|+
name|newOffset
operator|+
literal|"/"
operator|+
name|bufferLimit
operator|+
literal|"; previous offset "
operator|+
name|offset
operator|+
literal|", chunk "
operator|+
name|chunkInProgress
argument_list|)
throw|;
block|}
name|chunkInProgress
operator|.
name|length
operator|+=
operator|(
name|newOffset
operator|-
name|offset
operator|)
expr_stmt|;
name|this
operator|.
name|offset
operator|=
name|newOffset
expr_stmt|;
name|this
operator|.
name|chunkInProgressRows
operator|+=
name|rowsWritten
expr_stmt|;
block|}
specifier|public
name|int
name|getChunkInProgressRows
parameter_list|()
block|{
return|return
name|chunkInProgressRows
return|;
block|}
specifier|public
name|int
name|getSpaceLeft
parameter_list|()
block|{
return|return
name|getSpaceLeft
argument_list|(
operator|-
literal|1
argument_list|)
return|;
block|}
specifier|public
name|int
name|getSpaceLeft
parameter_list|(
name|int
name|offset
parameter_list|)
block|{
name|offset
operator|=
operator|(
name|offset
operator|>=
literal|0
operator|)
condition|?
name|offset
else|:
name|this
operator|.
name|offset
expr_stmt|;
return|return
name|buffer
operator|.
name|getContents
argument_list|()
operator|.
name|limit
argument_list|()
operator|-
name|offset
return|;
block|}
block|}
end_class

end_unit

