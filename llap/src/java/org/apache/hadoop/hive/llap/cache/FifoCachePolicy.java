begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|llap
operator|.
name|cache
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedHashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|locks
operator|.
name|Lock
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|locks
operator|.
name|ReentrantLock
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|llap
operator|.
name|cache
operator|.
name|BufferPool
operator|.
name|WeakBuffer
import|;
end_import

begin_class
specifier|public
class|class
name|FifoCachePolicy
implements|implements
name|CachePolicy
block|{
specifier|private
specifier|final
name|Lock
name|lock
init|=
operator|new
name|ReentrantLock
argument_list|()
decl_stmt|;
specifier|private
specifier|final
name|LinkedHashSet
argument_list|<
name|WeakBuffer
argument_list|>
name|buffers
decl_stmt|;
specifier|private
specifier|final
name|int
name|maxBuffers
decl_stmt|;
specifier|public
name|FifoCachePolicy
parameter_list|(
name|int
name|bufferSize
parameter_list|,
name|long
name|maxCacheSize
parameter_list|)
block|{
name|maxBuffers
operator|=
operator|(
name|int
operator|)
name|Math
operator|.
name|ceil
argument_list|(
operator|(
name|maxCacheSize
operator|*
literal|1.0
operator|)
operator|/
name|bufferSize
argument_list|)
expr_stmt|;
name|buffers
operator|=
operator|new
name|LinkedHashSet
argument_list|<
name|BufferPool
operator|.
name|WeakBuffer
argument_list|>
argument_list|(
call|(
name|int
call|)
argument_list|(
name|maxBuffers
operator|/
literal|0.75f
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|WeakBuffer
name|cache
parameter_list|(
name|WeakBuffer
name|buffer
parameter_list|)
block|{
name|WeakBuffer
name|result
init|=
literal|null
decl_stmt|;
name|lock
operator|.
name|lock
argument_list|()
expr_stmt|;
try|try
block|{
if|if
condition|(
name|buffers
operator|.
name|size
argument_list|()
operator|==
name|maxBuffers
condition|)
block|{
name|Iterator
argument_list|<
name|WeakBuffer
argument_list|>
name|iter
init|=
name|buffers
operator|.
name|iterator
argument_list|()
decl_stmt|;
while|while
condition|(
name|iter
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|WeakBuffer
name|candidate
init|=
name|iter
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|candidate
operator|.
name|invalidate
argument_list|()
condition|)
block|{
name|iter
operator|.
name|remove
argument_list|()
expr_stmt|;
break|break;
block|}
name|result
operator|=
name|candidate
expr_stmt|;
block|}
if|if
condition|(
name|result
operator|==
literal|null
condition|)
return|return
name|CANNOT_EVICT
return|;
block|}
name|buffers
operator|.
name|add
argument_list|(
name|buffer
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|lock
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
return|return
name|result
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|notifyLock
parameter_list|(
name|WeakBuffer
name|buffer
parameter_list|)
block|{
comment|// FIFO policy doesn't care.
block|}
annotation|@
name|Override
specifier|public
name|void
name|notifyUnlock
parameter_list|(
name|WeakBuffer
name|buffer
parameter_list|)
block|{
comment|// FIFO policy doesn't care.
block|}
block|}
end_class

end_unit

