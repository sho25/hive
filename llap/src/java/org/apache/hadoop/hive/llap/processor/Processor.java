begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|llap
operator|.
name|processor
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|llap
operator|.
name|api
operator|.
name|Llap
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|llap
operator|.
name|api
operator|.
name|impl
operator|.
name|RequestImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|llap
operator|.
name|loader
operator|.
name|Loader
import|;
end_import

begin_comment
comment|/**  * Request processor class. Currently, of dubious value.  */
end_comment

begin_class
specifier|public
class|class
name|Processor
implements|implements
name|Runnable
block|{
specifier|private
specifier|final
name|Pool
name|parent
decl_stmt|;
specifier|private
specifier|final
name|Loader
name|loader
decl_stmt|;
specifier|private
name|RequestImpl
name|request
decl_stmt|;
specifier|private
name|ChunkConsumer
name|consumer
decl_stmt|;
specifier|public
name|Processor
parameter_list|(
name|Pool
name|pool
parameter_list|,
name|Loader
name|loader
parameter_list|)
block|{
name|this
operator|.
name|parent
operator|=
name|pool
expr_stmt|;
name|this
operator|.
name|loader
operator|=
name|loader
expr_stmt|;
block|}
specifier|public
name|void
name|setRequest
parameter_list|(
name|RequestImpl
name|request
parameter_list|,
name|ChunkConsumer
name|consumer
parameter_list|)
block|{
name|this
operator|.
name|request
operator|=
name|request
expr_stmt|;
name|this
operator|.
name|consumer
operator|=
name|consumer
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
try|try
block|{
name|loader
operator|.
name|load
argument_list|(
name|request
argument_list|,
name|consumer
argument_list|)
expr_stmt|;
comment|// Synchronous load call that return results via consumer.
block|}
catch|catch
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
name|Llap
operator|.
name|LOG
operator|.
name|error
argument_list|(
literal|"Load failed"
argument_list|,
name|t
argument_list|)
expr_stmt|;
name|consumer
operator|.
name|setError
argument_list|(
name|t
argument_list|)
expr_stmt|;
block|}
name|parent
operator|.
name|returnProcessor
argument_list|(
name|this
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

