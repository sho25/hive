begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|llap
operator|.
name|chunk
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|llap
operator|.
name|api
operator|.
name|Vector
operator|.
name|Type
import|;
end_import

begin_comment
comment|/** Shared and utility methods for ChunkReader and ChunkWriter. */
end_comment

begin_class
specifier|public
class|class
name|ChunkUtils
block|{
specifier|public
specifier|final
specifier|static
name|int
name|BITMASK_SIZE_BYTES
init|=
literal|8
decl_stmt|;
specifier|public
specifier|final
specifier|static
name|int
name|BITMASK_SIZE_BITS
init|=
name|BITMASK_SIZE_BYTES
operator|*
literal|8
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|byte
name|FORMAT_VERSION
init|=
literal|0
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|byte
index|[]
name|TYPE_SIZES
init|=
operator|new
name|byte
index|[
name|Type
operator|.
name|BINARY
operator|.
name|value
argument_list|()
operator|+
literal|1
index|]
decl_stmt|;
static|static
block|{
name|TYPE_SIZES
index|[
name|Type
operator|.
name|BINARY
operator|.
name|value
argument_list|()
index|]
operator|=
operator|-
literal|1
expr_stmt|;
comment|// TODO: add support for binary
name|TYPE_SIZES
index|[
name|Type
operator|.
name|DECIMAL
operator|.
name|value
argument_list|()
index|]
operator|=
operator|-
literal|1
expr_stmt|;
comment|// TODO: add support for decimal
name|TYPE_SIZES
index|[
name|Type
operator|.
name|LONG
operator|.
name|value
argument_list|()
index|]
operator|=
literal|8
expr_stmt|;
name|TYPE_SIZES
index|[
name|Type
operator|.
name|DOUBLE
operator|.
name|value
argument_list|()
index|]
operator|=
literal|8
expr_stmt|;
block|}
specifier|public
specifier|static
enum|enum
name|RleSegmentType
block|{
name|INVALID
argument_list|(
literal|0
argument_list|)
block|,
name|REPEATING_NULL
argument_list|(
literal|1
argument_list|)
block|,
name|REPEATING_VALUE
argument_list|(
literal|2
argument_list|)
block|,
name|UNIQUE_NOT_NULL
argument_list|(
literal|3
argument_list|)
block|,
name|UNIQUE_NULL_BITMASK
argument_list|(
literal|4
argument_list|)
block|;
specifier|private
name|byte
name|value
decl_stmt|;
specifier|private
name|RleSegmentType
parameter_list|(
name|int
name|val
parameter_list|)
block|{
assert|assert
name|val
operator|>=
name|Byte
operator|.
name|MIN_VALUE
operator|&&
name|val
operator|<=
name|Byte
operator|.
name|MAX_VALUE
assert|;
name|this
operator|.
name|value
operator|=
operator|(
name|byte
operator|)
name|val
expr_stmt|;
block|}
specifier|private
specifier|static
specifier|final
name|RleSegmentType
index|[]
name|ints
init|=
operator|new
name|RleSegmentType
index|[
name|UNIQUE_NULL_BITMASK
operator|.
name|value
operator|+
literal|1
index|]
decl_stmt|;
static|static
block|{
for|for
control|(
name|RleSegmentType
name|type
range|:
name|RleSegmentType
operator|.
name|values
argument_list|()
control|)
block|{
name|ints
index|[
name|type
operator|.
name|value
index|]
operator|=
name|type
expr_stmt|;
block|}
block|}
specifier|public
specifier|static
name|RleSegmentType
name|fromInt
parameter_list|(
name|int
name|value
parameter_list|)
block|{
return|return
name|ints
index|[
name|value
index|]
return|;
block|}
specifier|public
name|byte
name|getValue
parameter_list|()
block|{
return|return
name|value
return|;
block|}
block|}
specifier|public
specifier|static
name|int
name|getSegmentDataSize
parameter_list|(
name|Type
name|type
parameter_list|,
name|RleSegmentType
name|segmentType
parameter_list|,
name|int
name|rowCount
parameter_list|)
block|{
name|int
name|valueSize
init|=
name|TYPE_SIZES
index|[
name|type
operator|.
name|value
argument_list|()
index|]
decl_stmt|;
switch|switch
condition|(
name|segmentType
condition|)
block|{
case|case
name|REPEATING_NULL
case|:
return|return
literal|0
return|;
case|case
name|REPEATING_VALUE
case|:
return|return
name|valueSize
return|;
case|case
name|UNIQUE_NOT_NULL
case|:
return|return
name|valueSize
operator|*
name|rowCount
return|;
case|case
name|UNIQUE_NULL_BITMASK
case|:
return|return
name|valueSize
operator|*
name|rowCount
operator|+
name|align8
argument_list|(
name|bitMaskSize
argument_list|(
name|rowCount
argument_list|)
argument_list|)
return|;
default|default:
throw|throw
operator|new
name|AssertionError
argument_list|(
literal|"Unsupported segment type "
operator|+
name|segmentType
argument_list|)
throw|;
block|}
block|}
specifier|public
specifier|static
name|int
name|bitMaskSize
parameter_list|(
name|int
name|rowCount
parameter_list|)
block|{
return|return
operator|(
name|rowCount
operator|>>>
literal|3
operator|)
operator|+
operator|(
operator|(
operator|(
name|rowCount
operator|&
literal|7
operator|)
operator|>
literal|0
operator|)
condition|?
literal|1
else|:
literal|0
operator|)
return|;
block|}
specifier|public
specifier|static
name|int
name|align8
parameter_list|(
name|int
name|number
parameter_list|)
block|{
name|int
name|rem
init|=
name|number
operator|&
literal|7
decl_stmt|;
return|return
name|number
operator|-
name|rem
operator|+
operator|(
name|rem
operator|==
literal|0
condition|?
literal|0
else|:
literal|8
operator|)
return|;
block|}
specifier|public
specifier|static
name|int
name|align64
parameter_list|(
name|int
name|number
parameter_list|)
block|{
name|int
name|rem
init|=
name|number
operator|&
literal|63
decl_stmt|;
return|return
name|number
operator|-
name|rem
operator|+
operator|(
name|rem
operator|==
literal|0
condition|?
literal|0
else|:
literal|64
operator|)
return|;
block|}
specifier|public
specifier|static
name|int
name|getNonRepeatingValuesOffset
parameter_list|(
name|RleSegmentType
name|type
parameter_list|,
name|int
name|rowCount
parameter_list|)
block|{
if|if
condition|(
name|type
operator|==
name|RleSegmentType
operator|.
name|UNIQUE_NULL_BITMASK
condition|)
block|{
return|return
literal|8
operator|+
name|align8
argument_list|(
name|bitMaskSize
argument_list|(
name|rowCount
argument_list|)
argument_list|)
return|;
block|}
return|return
literal|8
return|;
block|}
specifier|public
specifier|static
name|int
name|getFullBitmaskSize
parameter_list|(
name|int
name|sizeOf
parameter_list|)
block|{
return|return
name|BITMASK_SIZE_BYTES
operator|*
operator|(
literal|1
operator|+
operator|(
name|sizeOf
operator|<<
literal|3
operator|)
operator|)
return|;
block|}
block|}
end_class

end_unit

